'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _values = require('lodash/values');

var _values2 = _interopRequireDefault(_values);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ReactChildren = require('./utils/ReactChildren');

var _ReactChildren2 = _interopRequireDefault(_ReactChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  name: _propTypes2.default.string,
  inline: _propTypes2.default.bool,
  value: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  defaultValue: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  onChange: _propTypes2.default.func
};

var CheckboxGroup = function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  function CheckboxGroup(props) {
    _classCallCheck(this, CheckboxGroup);

    var _this = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    _this.checkboxs = {};
    _this.state = {
      value: props.defaultValue
    };
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _isEqual2.default)(nextProps.value, this.props.value)) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange() {

      var value = [];
      var onChange = this.props.onChange;

      (0, _values2.default)(this.checkboxs).forEach(function (checkbox) {
        if (checkbox.state.checked) {
          value.push(checkbox.props.value);
        }
      });

      onChange && onChange(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          inline = _props.inline,
          name = _props.name,
          value = _props.value,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['className', 'inline', 'name', 'value', 'children']);

      var nextValue = value || this.state.value || [];
      var clesses = (0, _classnames2.default)({
        'checkbox-list': true
      }, className);

      var items = _ReactChildren2.default.mapCloneElement(children, function (child, index) {
        var _extends2;

        var childProps = _extends((_extends2 = {
          name: name,
          inline: inline,
          ref: function ref(_ref) {
            _this2.checkboxs[index] = _ref;
          }
        }, _defineProperty(_extends2, value ? 'checked' : 'defaultChecked', nextValue.some(function (i) {
          return i === child.props.value;
        })), _defineProperty(_extends2, 'onChange', _this2.handleChange), _extends2), child.props);

        if (child.type.displayName === 'Checkbox') {
          return childProps;
        }

        return child.props;
      });

      var elementProps = (0, _omit2.default)(props, Object.keys(propTypes));

      return _react2.default.createElement(
        'div',
        _extends({}, elementProps, {
          className: clesses,
          role: 'group'
        }),
        items
      );
    }
  }]);

  return CheckboxGroup;
}(_react2.default.Component);

CheckboxGroup.propTypes = propTypes;

exports.default = CheckboxGroup;