'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _values = require('lodash/values');

var _values2 = _interopRequireDefault(_values);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _propTypes3 = require('rsuite-utils/lib/propTypes');

var _Overlay = require('rsuite-utils/lib/Overlay');

var _ReactChildren = require('./utils/ReactChildren');

var _ReactChildren2 = _interopRequireDefault(_ReactChildren);

var _ButtonGroup = require('./ButtonGroup');

var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

var _DropdownToggle = require('./DropdownToggle');

var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

var _DropdownMenu = require('./DropdownMenu');

var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

var _DropdownMenuItem = require('./DropdownMenuItem');

var _DropdownMenuItem2 = _interopRequireDefault(_DropdownMenuItem);

var _decorate = require('./utils/decorate');

var _decorate2 = _interopRequireDefault(_decorate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = _extends({}, _DropdownToggle2.default.propTypes, {
  disabled: _propTypes2.default.bool,
  block: _propTypes2.default.bool,
  dropup: _propTypes2.default.bool,
  /*
   * If 'select' is true , title will be updated after the 'onSelect' trigger .
   */
  select: _propTypes2.default.bool,
  bothEnds: _propTypes2.default.bool,
  onClose: _propTypes2.default.func,
  onOpen: _propTypes2.default.func,
  onToggle: _propTypes2.default.func,
  onSelect: _propTypes2.default.func,
  componentClass: _propTypes3.elementType,
  activeKey: _propTypes2.default.any, // eslint-disable-line react/forbid-prop-types
  menuStyle: _propTypes2.default.object, // eslint-disable-line react/forbid-prop-types
  autoClose: _propTypes2.default.bool
});

var defaultProps = {
  componentClass: _ButtonGroup2.default,
  autoClose: true
};

var Dropdown = function (_React$Component) {
  _inherits(Dropdown, _React$Component);

  function Dropdown(props) {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

    _this.state = {
      title: null,
      activeKey: _this.props.activeKey,
      open: false
    };
    _this.toggle = _this.toggle.bind(_this);
    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleSelect = _this.handleSelect.bind(_this);

    return _this;
  }

  _createClass(Dropdown, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.update();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _isEqual2.default)(nextProps, this.props)) {
        this.update(nextProps);
      }
    }
  }, {
    key: 'toggle',
    value: function toggle(isOpen) {
      var _props = this.props,
          onOpen = _props.onOpen,
          onClose = _props.onClose,
          onToggle = _props.onToggle;

      var open = (0, _isUndefined2.default)(isOpen) ? !this.state.open : isOpen;
      var handleToggle = open ? onOpen : onClose;

      this.setState({ open: open }, function () {
        handleToggle && handleToggle();
      });

      onToggle && onToggle();
    }
  }, {
    key: 'update',
    value: function update(props) {
      var _ref = props || this.props,
          children = _ref.children,
          select = _ref.select,
          activeKey = _ref.activeKey;

      var title = void 0;

      if (select) {
        var activeItem = _ReactChildren2.default.find(children, function (item) {
          var displayName = (0, _get2.default)(item, ['type', 'displayName']);
          if (displayName === 'DropdownMenuItem' || displayName === 'NavItem') {
            return (0, _isEqual2.default)(activeKey, item.props.eventKey) || item.props.active;
          }
          return false;
        });
        if (activeItem) {
          title = activeItem.props.children;
        }
      }

      this.setState({
        activeKey: activeKey,
        title: title
      });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      if (!this.props.disabled) {
        this.toggle();
      }
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(eventKey, props, event) {
      var _props2 = this.props,
          select = _props2.select,
          onSelect = _props2.onSelect,
          onClose = _props2.onClose,
          autoClose = _props2.autoClose;


      if (select) {
        this.setState({
          title: props.children,
          activeKey: props.eventKey
        });
      }

      onSelect && onSelect(eventKey, props, event);
      if (autoClose) {
        this.toggle(false);
        onClose && onClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          title = _props3.title,
          children = _props3.children,
          className = _props3.className,
          activeKey = _props3.activeKey,
          dropup = _props3.dropup,
          bothEnds = _props3.bothEnds,
          menuStyle = _props3.menuStyle,
          block = _props3.block,
          useAnchor = _props3.useAnchor,
          disabled = _props3.disabled,
          Component = _props3.componentClass,
          noCaret = _props3.noCaret,
          props = _objectWithoutProperties(_props3, ['title', 'children', 'className', 'activeKey', 'dropup', 'bothEnds', 'menuStyle', 'block', 'useAnchor', 'disabled', 'componentClass', 'noCaret']);

      var Toggle = _react2.default.createElement(
        _DropdownToggle2.default,
        {
          block: block,
          useAnchor: useAnchor,
          disabled: disabled,
          noCaret: noCaret,
          className: (0, _classnames2.default)((0, _decorate.getClassNames)(props, 'btn')),
          onClick: this.handleClick
        },
        this.state.title || title
      );

      var Menu = _react2.default.createElement(
        _DropdownMenu2.default,
        {
          onSelect: this.handleSelect,
          activeKey: this.state.activeKey,
          style: menuStyle
        },
        children
      );

      if (this.state.open) {
        Menu = _react2.default.createElement(
          _Overlay.RootCloseWrapper,
          { onRootClose: this.toggle },
          Menu
        );
      }
      var classes = (0, _classnames2.default)({
        dropup: dropup,
        dropdown: !dropup,
        open: this.state.open,
        'both-ends': bothEnds
      }, className);

      var elementProps = (0, _omit2.default)(props, ['select', 'onClose', 'onOpen', 'onToggle', 'autoClose']);
      if (Component.displayName === 'ButtonGroup') {
        elementProps.block = block;
      }

      return _react2.default.createElement(
        Component,
        _extends({}, elementProps, {
          className: classes,
          role: 'menu'
        }),
        Toggle,
        Menu
      );
    }
  }]);

  return Dropdown;
}(_react2.default.Component);

Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
Dropdown.Item = _DropdownMenuItem2.default;

exports.default = (0, _decorate2.default)({
  size: true,
  shape: {
    oneOf: [].concat(_toConsumableArray((0, _values2.default)(_decorate.STATE)), _toConsumableArray((0, _values2.default)(_decorate.STYLES))),
    default: _decorate.STATE.default
  }
})(Dropdown);