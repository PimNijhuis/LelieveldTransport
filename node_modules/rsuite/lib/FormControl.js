'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _elementType = require('rsuite-utils/lib/propTypes/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _decorate = require('./utils/decorate');

var _decorate2 = _interopRequireDefault(_decorate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  componentClass: _elementType2.default,
  type: _propTypes2.default.string,
  id: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  inputRef: _propTypes2.default.func
};

var defaultProps = {
  componentClass: 'input',
  type: undefined,
  id: undefined,
  onChange: undefined,
  inputRef: undefined
};

var contextTypes = {
  formGroup: _propTypes2.default.object
};

var FormControl = function (_React$Component) {
  _inherits(FormControl, _React$Component);

  function FormControl(props) {
    _classCallCheck(this, FormControl);

    var _this = _possibleConstructorReturn(this, (FormControl.__proto__ || Object.getPrototypeOf(FormControl)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(FormControl, [{
    key: 'handleChange',
    value: function handleChange(event) {
      var target = event.target;
      var onChange = this.props.onChange;

      onChange && onChange(target.value, event);
    }
  }, {
    key: 'render',
    value: function render() {
      var _context$formGroup = this.context.formGroup,
          formGroup = _context$formGroup === undefined ? {} : _context$formGroup;

      var _props = this.props,
          type = _props.type,
          className = _props.className,
          inputRef = _props.inputRef,
          Component = _props.componentClass,
          _props$id = _props.id,
          id = _props$id === undefined ? formGroup.controlId : _props$id,
          props = _objectWithoutProperties(_props, ['type', 'className', 'inputRef', 'componentClass', 'id']);

      var classes = (0, _classnames2.default)(_extends({
        // input[type="file"] should not have .form-control.
        'form-control': type !== 'file'
      }, (0, _decorate.getClassNames)(this.props, 'input')), className);

      return _react2.default.createElement(Component, _extends({}, props, {
        type: type,
        id: id,
        className: classes,
        ref: inputRef,
        onChange: this.handleChange
      }));
    }
  }]);

  return FormControl;
}(_react2.default.Component);

FormControl.propTypes = propTypes;
FormControl.defaultProps = defaultProps;
FormControl.contextTypes = contextTypes;

exports.default = (0, _decorate2.default)({
  size: true
})(FormControl);