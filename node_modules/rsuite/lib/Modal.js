'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _Modal = require('rsuite-utils/lib/Overlay/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Fade = require('rsuite-utils/lib/Animation/Fade');

var _Fade2 = _interopRequireDefault(_Fade);

var _propTypes3 = require('rsuite-utils/lib/propTypes');

var _domLib = require('dom-lib');

var _ReactChildren = require('./utils/ReactChildren');

var _ReactChildren2 = _interopRequireDefault(_ReactChildren);

var _ModalDialog = require('./ModalDialog');

var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

var _ModalBody = require('./ModalBody');

var _ModalBody2 = _interopRequireDefault(_ModalBody);

var _ModalHeader = require('./ModalHeader');

var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

var _ModalTitle = require('./ModalTitle');

var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

var _ModalFooter = require('./ModalFooter');

var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TRANSITION_DURATION = 300;
var BACKDROP_TRANSITION_DURATION = 150;

var propTypes = _extends({}, _Modal2.default.propTypes, _ModalDialog2.default.propTypes, {
  backdrop: _propTypes2.default.oneOf(['static', true, false]),
  animation: _propTypes2.default.bool,
  dialogComponentClass: _propTypes3.elementType,
  show: _propTypes2.default.bool,
  keyboard: _propTypes2.default.bool,
  enforceFocus: _propTypes2.default.bool,
  autoResizeHeight: _propTypes2.default.bool,
  onHide: _propTypes2.default.func,
  onEnter: _propTypes2.default.func,
  onEntering: _propTypes2.default.func,
  onEntered: _propTypes2.default.func,
  onExit: _propTypes2.default.func,
  onExiting: _propTypes2.default.func,
  onExited: _propTypes2.default.func
});

var defaultProps = _extends({}, _Modal2.default.defaultProps, {
  prefixClass: 'modal',
  animation: true,
  dialogComponentClass: _ModalDialog2.default,
  autoResizeHeight: true
});

var childContextTypes = {
  onModalHide: _propTypes2.default.func
};

var Modal = function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.state = {
      modalStyles: {},
      bodyStyles: {}
    };
    _this.handleShow = _this.handleShow.bind(_this);
    _this.handleHide = _this.handleHide.bind(_this);
    _this.handleDialogClick = _this.handleDialogClick.bind(_this);
    _this.handleWindowResize = _this.handleWindowResize.bind(_this);
    return _this;
  }

  _createClass(Modal, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        onModalHide: this.props.onHide
      };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.windowResizeListener) {
        this.windowResizeListener.off();
      }
    }
  }, {
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          container = _props.container,
          autoResizeHeight = _props.autoResizeHeight;

      /* eslint-disable react/no-find-dom-node */

      var node = (0, _reactDom.findDOMNode)(this.dialog);
      var doc = (0, _domLib.ownerDocument)(node);
      var scrollHeight = node ? node.scrollHeight : 0;

      var bodyIsOverflowing = (0, _domLib.isOverflowing)((0, _reactDom.findDOMNode)(container || doc.body));
      var modalIsOverflowing = scrollHeight > doc.documentElement.clientHeight;
      var styles = {
        modalStyles: {
          paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : 0,
          paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : 0
        }
      };

      if (autoResizeHeight) {
        /**
         * Header height + Footer height + Dialog margin
         */
        var excludeHeight = 200;
        var contentHeight = (0, _domLib.getHeight)(window) - excludeHeight;
        var maxHeight = scrollHeight >= contentHeight ? contentHeight : scrollHeight;

        styles.bodyStyles = {
          maxHeight: maxHeight,
          overflow: 'auto'
        };
      }

      return styles;
    }
  }, {
    key: 'handleShow',
    value: function handleShow() {

      this.windowResizeListener = (0, _domLib.on)(window, 'resize', this.handleWindowResize);
      this.setState(this.getStyles());
      var onEntering = this.props.onEntering;

      onEntering && onEntering.apply(undefined, arguments);
    }
  }, {
    key: 'handleHide',
    value: function handleHide() {
      if (this.windowResizeListener) {
        this.windowResizeListener.off();
      }
      var onExited = this.props.onExited;

      onExited && onExited.apply(undefined, arguments);
    }
  }, {
    key: 'handleDialogClick',
    value: function handleDialogClick(event) {
      if (event.target !== event.currentTarget) {
        return;
      }
      var onHide = this.props.onHide;

      onHide && onHide(event);
    }
  }, {
    key: 'handleWindowResize',
    value: function handleWindowResize() {
      this.setState(this.getStyles());
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          className = _props2.className,
          children = _props2.children,
          dialogClassName = _props2.dialogClassName,
          dialogStyle = _props2.dialogStyle,
          autoResizeHeight = _props2.autoResizeHeight,
          animation = _props2.animation,
          prefixClass = _props2.prefixClass,
          style = _props2.style,
          show = _props2.show,
          props = _objectWithoutProperties(_props2, ['className', 'children', 'dialogClassName', 'dialogStyle', 'autoResizeHeight', 'animation', 'prefixClass', 'style', 'show']);

      var _state = this.state,
          modalStyles = _state.modalStyles,
          bodyStyles = _state.bodyStyles;

      var inClass = { in: show && !animation };
      var Dialog = props.dialogComponentClass;

      var parentProps = (0, _pick2.default)(props, Object.keys(_Modal2.default.propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']));
      var dialogProps = (0, _omit2.default)(props, ['enforceFocus', 'keyboard', 'backdrop', 'onHide', 'dialogComponentClass']);

      var items = autoResizeHeight && children ? _ReactChildren2.default.mapCloneElement(children, function (child) {
        if (child.type.displayName === 'ModalBody') {
          return {
            style: bodyStyles
          };
        }
        return null;
      }) : children;

      var modal = _react2.default.createElement(
        Dialog,
        _extends({}, dialogProps, {
          style: _extends({}, modalStyles, style),
          className: (0, _classnames2.default)(className, inClass),
          dialogClassName: dialogClassName,
          dialogStyle: dialogStyle,
          onClick: props.backdrop === true ? this.handleDialogClick : null,
          ref: function ref(_ref) {
            _this2.dialog = _ref;
          }
        }),
        items
      );

      return _react2.default.createElement(
        _Modal2.default,
        _extends({
          ref: function ref(_ref2) {
            _this2.modal = _ref2;
          },
          show: show,
          onEntering: this.handleShow,
          onExited: this.handleHide,
          backdropClassName: (0, _classnames2.default)(prefixClass + '-backdrop', inClass),
          containerClassName: prefixClass + '-open',
          transition: animation ? _Fade2.default : undefined,
          dialogTransitionTimeout: TRANSITION_DURATION,
          backdropTransitionTimeout: BACKDROP_TRANSITION_DURATION
        }, parentProps),
        modal
      );
    }
  }]);

  return Modal;
}(_react2.default.Component);

Modal.propTypes = propTypes;
Modal.defaultProps = defaultProps;
Modal.childContextTypes = childContextTypes;

Modal.Body = _ModalBody2.default;
Modal.Header = _ModalHeader2.default;
Modal.Title = _ModalTitle2.default;
Modal.Footer = _ModalFooter2.default;
Modal.Dialog = _ModalDialog2.default;

exports.default = Modal;