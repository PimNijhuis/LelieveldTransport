'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createChainedFunction = require('./utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  prefixClass: _propTypes2.default.string,
  onClick: _propTypes2.default.func
};

var defaultProps = {
  prefixClass: 'navbar',
  onClick: undefined
};

var contextTypes = {
  onToggle: _propTypes2.default.func,
  expanded: _propTypes2.default.bool
};

var NavbarToggle = function (_React$Component) {
  _inherits(NavbarToggle, _React$Component);

  function NavbarToggle() {
    _classCallCheck(this, NavbarToggle);

    return _possibleConstructorReturn(this, (NavbarToggle.__proto__ || Object.getPrototypeOf(NavbarToggle)).apply(this, arguments));
  }

  _createClass(NavbarToggle, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          onClick = _props.onClick,
          className = _props.className,
          children = _props.children,
          prefixClass = _props.prefixClass,
          props = _objectWithoutProperties(_props, ['onClick', 'className', 'children', 'prefixClass']);

      var _context = this.context,
          onToggle = _context.onToggle,
          expanded = _context.expanded;


      var classes = (0, _classnames2.default)(prefixClass + '-toggle', {
        collapsed: !expanded
      }, className);

      return _react2.default.createElement(
        'button',
        _extends({}, props, {
          type: 'button',
          onClick: (0, _createChainedFunction2.default)(onClick, onToggle),
          className: classes
        }),
        children || _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(
            'span',
            { className: 'sr-only' },
            'Toggle navigation'
          ),
          _react2.default.createElement('span', { className: 'icon-bar' }),
          _react2.default.createElement('span', { className: 'icon-bar' }),
          _react2.default.createElement('span', { className: 'icon-bar' })
        )
      );
    }
  }]);

  return NavbarToggle;
}(_react2.default.Component);

NavbarToggle.propTypes = propTypes;
NavbarToggle.defaultProps = defaultProps;
NavbarToggle.contextTypes = contextTypes;

exports.default = NavbarToggle;