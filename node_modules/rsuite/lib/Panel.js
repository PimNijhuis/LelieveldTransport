'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _Collapse = require('rsuite-utils/lib/Animation/Collapse');

var _Collapse2 = _interopRequireDefault(_Collapse);

var _decorate = require('./utils/decorate');

var _decorate2 = _interopRequireDefault(_decorate);

var _isNullOrUndefined = require('./utils/isNullOrUndefined');

var _isNullOrUndefined2 = _interopRequireDefault(_isNullOrUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  collapsible: _propTypes2.default.bool,
  header: _propTypes2.default.node,
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  defaultExpanded: _propTypes2.default.bool,
  expanded: _propTypes2.default.bool,
  eventKey: _propTypes2.default.any, // eslint-disable-line react/forbid-prop-types
  headerRole: _propTypes2.default.string,
  panelRole: _propTypes2.default.string,
  prefixClass: _propTypes2.default.string,

  onSelect: _propTypes2.default.func,
  onEnter: _Collapse2.default.propTypes.onEnter,
  onEntering: _Collapse2.default.propTypes.onEntering,
  onEntered: _Collapse2.default.propTypes.onEntered,
  onExit: _Collapse2.default.propTypes.onExit,
  onExiting: _Collapse2.default.propTypes.onExiting,
  onExited: _Collapse2.default.propTypes.onExited
};

var defaultProps = {
  defaultExpanded: false,
  prefixClass: 'panel'
};

function shouldRenderFill(child) {
  return _react2.default.isValidElement(child) && child.props.fill !== null;
}

var Panel = function (_React$Component) {
  _inherits(Panel, _React$Component);

  function Panel(props) {
    _classCallCheck(this, Panel);

    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));

    _this.state = {
      expanded: props.defaultExpanded
    };

    _this.handleSelect = _this.handleSelect.bind(_this);
    _this.handleToggle = _this.handleToggle.bind(_this);
    return _this;
  }

  _createClass(Panel, [{
    key: 'handleSelect',
    value: function handleSelect(event) {
      event.persist();
      event.selected = true;
      var _props = this.props,
          onSelect = _props.onSelect,
          eventKey = _props.eventKey;

      if (onSelect) {
        onSelect(eventKey, event);
      } else {
        event.preventDefault();
      }

      if (event.selected) {
        this.handleToggle();
      }
    }
  }, {
    key: 'handleToggle',
    value: function handleToggle() {
      this.setState({
        expanded: !this.state.expanded
      });
    }
  }, {
    key: 'isExpanded',
    value: function isExpanded() {
      return (0, _isNullOrUndefined2.default)(this.props.expanded) ? this.state.expanded : this.props.expanded;
    }
  }, {
    key: 'renderCollapsibleTitle',
    value: function renderCollapsibleTitle(header, headerRole) {
      var prefixClass = this.props.prefixClass;

      return _react2.default.createElement(
        'h4',
        { className: prefixClass + '-title', role: 'presentation' },
        this.renderAnchor(header, headerRole)
      );
    }
  }, {
    key: 'renderCollapsibleBody',
    value: function renderCollapsibleBody(panelRole) {
      var _props2 = this.props,
          id = _props2.id,
          prefixClass = _props2.prefixClass;


      var collapseProps = _extends({}, (0, _pick2.default)(this.props, Object.keys(_Collapse2.default.propTypes)), {
        in: this.isExpanded()
      });
      var props = {
        id: id,
        className: prefixClass + '-collapse',
        ref: 'panel',
        'aria-hidden': !this.isExpanded()
      };
      if (panelRole) {
        props.role = panelRole;
      }

      return _react2.default.createElement(
        _Collapse2.default,
        collapseProps,
        _react2.default.createElement(
          'div',
          props,
          this.renderBody()
        )
      );
    }
  }, {
    key: 'renderBody',
    value: function renderBody() {
      var _props3 = this.props,
          prefixClass = _props3.prefixClass,
          children = _props3.children;

      var allChildren = children;
      var bodyElements = [];
      var panelBodyChildren = [];
      var bodyClass = prefixClass + '-body';

      function getProps() {
        return {
          key: bodyElements.length
        };
      }

      function addPanelChild(child) {
        bodyElements.push((0, _react.cloneElement)(child, getProps()));
      }

      function addPanelBody(body) {
        var props = getProps();
        bodyElements.push(_react2.default.createElement(
          'div',
          _extends({}, props, {
            className: bodyClass
          }),
          body
        ));
      }

      function maybeRenderPanelBody() {
        if (panelBodyChildren.length === 0) {
          return;
        }

        addPanelBody(panelBodyChildren);
        panelBodyChildren = [];
      }

      if (!Array.isArray(allChildren) || allChildren.length === 0) {
        if (shouldRenderFill(allChildren)) {
          addPanelChild(allChildren);
        } else {
          addPanelBody(allChildren);
        }
      } else {
        allChildren.forEach(function (child) {
          if (shouldRenderFill(child)) {
            maybeRenderPanelBody();
            addPanelChild(child);
          } else {
            panelBodyChildren.push(child);
          }
        });

        maybeRenderPanelBody();
      }

      return bodyElements;
    }
  }, {
    key: 'renderHeading',
    value: function renderHeading(headerRole) {
      var _props4 = this.props,
          header = _props4.header,
          collapsible = _props4.collapsible,
          prefixClass = _props4.prefixClass;


      if (!header) {
        return null;
      }

      if (!_react2.default.isValidElement(header) || Array.isArray(header)) {
        header = collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
      } else {
        var className = (0, _classnames2.default)(prefixClass + '-title', header.props.className);
        header = (0, _react.cloneElement)(header, { className: className });
      }
      return _react2.default.createElement(
        'div',
        {
          role: 'rowheader',
          className: prefixClass + '-heading',
          onClick: this.handleSelect,
          tabIndex: -1
        },
        header
      );
    }
  }, {
    key: 'renderAnchor',
    value: function renderAnchor(header, headerRole) {
      var _props5 = this.props,
          id = _props5.id,
          collapsible = _props5.collapsible;

      return _react2.default.createElement(
        'a',
        {
          href: '#' + (id || ''),
          'aria-controls': collapsible ? id : null,
          className: this.isExpanded() ? null : 'collapsed',
          'aria-expanded': this.isExpanded(),
          'aria-selected': this.isExpanded(),
          role: headerRole
        },
        header
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props6 = this.props,
          headerRole = _props6.headerRole,
          panelRole = _props6.panelRole,
          className = _props6.className,
          collapsible = _props6.collapsible,
          id = _props6.id,
          props = _objectWithoutProperties(_props6, ['headerRole', 'panelRole', 'className', 'collapsible', 'id']);

      var clesses = (0, _classnames2.default)(_extends({}, (0, _decorate.getClassNames)(this.props)), className);

      var elementProps = (0, _omit2.default)(props, Object.keys(propTypes));
      return _react2.default.createElement(
        'div',
        _extends({}, elementProps, {
          className: clesses,
          onSelect: null,
          id: collapsible ? null : id
        }),
        this.renderHeading(headerRole),
        collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody()
      );
    }
  }]);

  return Panel;
}(_react2.default.Component);

Panel.propTypes = propTypes;
Panel.defaultProps = defaultProps;

exports.default = (0, _decorate2.default)({
  shape: true
})(Panel);