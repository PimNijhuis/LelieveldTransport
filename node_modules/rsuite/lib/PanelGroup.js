'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _ReactChildren = require('./utils/ReactChildren');

var _ReactChildren2 = _interopRequireDefault(_ReactChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  accordion: _propTypes2.default.bool,
  activeKey: _propTypes2.default.any, // eslint-disable-line react/forbid-prop-types
  defaultActiveKey: _propTypes2.default.any, // eslint-disable-line react/forbid-prop-types
  className: _propTypes2.default.string,
  children: _propTypes2.default.node,
  prefixClass: _propTypes2.default.string,
  onSelect: _propTypes2.default.func
};

var defaultProps = {
  prefixClass: 'panel-group',
  accordion: false
};

var PanelGroup = function (_React$Component) {
  _inherits(PanelGroup, _React$Component);

  function PanelGroup(props) {
    _classCallCheck(this, PanelGroup);

    var _this = _possibleConstructorReturn(this, (PanelGroup.__proto__ || Object.getPrototypeOf(PanelGroup)).call(this, props));

    _this.handleSelect = _this.handleSelect.bind(_this);
    _this.renderPanel = _this.renderPanel.bind(_this);
    _this.state = {
      activeKey: props.defaultActiveKey
    };
    return _this;
  }

  _createClass(PanelGroup, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      // Defer any updates to this component during the `onSelect` handler.
      return !this.isChanging;
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(activeKey, event) {
      var onSelect = this.props.onSelect;

      event.preventDefault();
      if (onSelect) {
        this.isChanging = true;
        onSelect(activeKey, event);
        this.isChanging = false;
      }

      if (this.state.activeKey === activeKey) {
        activeKey = undefined;
      }

      this.setState({ activeKey: activeKey });
    }
  }, {
    key: 'renderPanel',
    value: function renderPanel(child, index) {

      if (!_react2.default.isValidElement(child)) {
        return child;
      }
      var _props = this.props,
          activeKey = _props.activeKey,
          accordion = _props.accordion;

      var props = {
        key: child.key ? child.key : index,
        ref: child.ref
      };

      if (accordion) {
        props.headerRole = 'tab';
        props.panelRole = 'tabpanel';
        props.collapsible = true;
        props.expanded = child.props.eventKey === (activeKey || this.state.activeKey);
        props.onSelect = this.handleSelect;
      }

      return props;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          accordion = _props2.accordion,
          children = _props2.children,
          onSelect = _props2.onSelect,
          props = _objectWithoutProperties(_props2, ['className', 'accordion', 'children', 'onSelect']);

      var classes = (0, _classnames2.default)('panel-group', className);
      var elementProps = (0, _omit2.default)(props, Object.keys(propTypes));
      return _react2.default.createElement(
        'div',
        _extends({}, elementProps, {
          role: accordion ? 'tablist' : undefined,
          className: classes
        }),
        _ReactChildren2.default.mapCloneElement(children, this.renderPanel)
      );
    }
  }]);

  return PanelGroup;
}(_react2.default.Component);

PanelGroup.propTypes = propTypes;
PanelGroup.defaultProps = defaultProps;

exports.default = PanelGroup;