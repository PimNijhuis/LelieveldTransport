'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  id: _propTypes2.default.string,
  name: _propTypes2.default.string,
  inline: _propTypes2.default.bool,
  title: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  checked: _propTypes2.default.bool,
  defaultChecked: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  inputRef: _propTypes2.default.func,
  value: _propTypes2.default.any // eslint-disable-line react/forbid-prop-types
};

var Radio = function (_React$Component) {
  _inherits(Radio, _React$Component);

  function Radio(props) {
    _classCallCheck(this, Radio);

    var _this = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

    _this.state = {
      checked: props.checked || props.defaultChecked
    };
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(Radio, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      if (nextProps.checked !== this.props.checked) {
        this.setState({
          checked: nextProps.checked
        });
      }
    }
  }, {
    key: 'updateCheckedState',
    value: function updateCheckedState(checked, callback) {
      this.setState({ checked: checked }, callback);
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var _props = this.props,
          value = _props.value,
          disabled = _props.disabled,
          onChange = _props.onChange;

      var target = event.target;

      if (disabled) {
        return;
      }

      this.setState({ checked: target.checked }, function () {
        var nextValue = (0, _isUndefined2.default)(value) ? target.checked : value;
        onChange && onChange(nextValue, event);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          inline = _props2.inline,
          title = _props2.title,
          name = _props2.name,
          id = _props2.id,
          className = _props2.className,
          children = _props2.children,
          disabled = _props2.disabled,
          style = _props2.style,
          inputRef = _props2.inputRef,
          value = _props2.value;
      var checked = this.state.checked;

      var classes = (0, _classnames2.default)({
        'radio-inline': inline
      }, className);

      var radioClasses = (0, _classnames2.default)('radio', {
        disabled: disabled
      });

      var input = _react2.default.createElement(
        'span',
        { className: (0, _classnames2.default)('radio-wrapper', { checked: checked }) },
        _react2.default.createElement('input', {
          id: id,
          type: 'radio',
          ref: inputRef,
          value: value,
          name: name,
          disabled: disabled,
          onChange: this.handleChange
        })
      );

      return _react2.default.createElement(
        'div',
        {
          className: classes,
          style: style
        },
        _react2.default.createElement(
          'div',
          {
            className: radioClasses,
            role: 'button'
          },
          _react2.default.createElement(
            'label',
            { title: title },
            input,
            children
          )
        )
      );
    }
  }]);

  return Radio;
}(_react2.default.Component);

Radio.displayName = 'Radio';
Radio.propTypes = propTypes;

exports.default = Radio;