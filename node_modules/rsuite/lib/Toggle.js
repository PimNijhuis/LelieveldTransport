'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _decorate = require('./utils/decorate');

var _decorate2 = _interopRequireDefault(_decorate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  disabled: _propTypes2.default.bool,
  checked: _propTypes2.default.bool,
  defaultChecked: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  checkedChildren: _propTypes2.default.node,
  unCheckedChildren: _propTypes2.default.node,
  prefixClass: _propTypes2.default.string
};

var defaultProps = {
  prefixClass: 'btn-toggle'
};

var Toggle = function (_React$Component) {
  _inherits(Toggle, _React$Component);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    _this.state = {
      checked: props.checked || props.defaultChecked
    };
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(Toggle, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.checked !== this.props.checked) {
        this.setState({
          checked: nextProps.checked
        });
      }
    }
  }, {
    key: 'getCheckedStatus',
    value: function getCheckedStatus() {
      var checked = this.props.checked;

      return (0, _isUndefined2.default)(checked) ? this.state.checked : checked;
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var _props = this.props,
          onChange = _props.onChange,
          disabled = _props.disabled;

      var checked = !this.getCheckedStatus();

      if (disabled) {
        return;
      }

      this.setState({ checked: checked }, function () {
        onChange && onChange(checked, event);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _extends2;

      var _props2 = this.props,
          disabled = _props2.disabled,
          className = _props2.className,
          onChange = _props2.onChange,
          checkedChildren = _props2.checkedChildren,
          unCheckedChildren = _props2.unCheckedChildren,
          prefixClass = _props2.prefixClass,
          props = _objectWithoutProperties(_props2, ['disabled', 'className', 'onChange', 'checkedChildren', 'unCheckedChildren', 'prefixClass']);

      var checked = this.getCheckedStatus();
      var classes = (0, _classnames2.default)(_extends({}, (0, _decorate.getClassNames)(this.props), (_extends2 = {}, _defineProperty(_extends2, prefixClass + '-checked', checked), _defineProperty(_extends2, 'disabled', disabled), _extends2)), className);

      var inner = checked ? checkedChildren : unCheckedChildren;
      var elementProps = (0, _omit2.default)(props, Object.keys(propTypes));

      return _react2.default.createElement(
        'span',
        _extends({}, elementProps, {
          className: classes,
          role: 'button',
          tabIndex: -1,
          onClick: this.handleChange
        }),
        _react2.default.createElement(
          'span',
          { className: 'toggle-inner' },
          inner
        )
      );
    }
  }]);

  return Toggle;
}(_react2.default.Component);

Toggle.propTypes = propTypes;
Toggle.defaultProps = defaultProps;

exports.default = (0, _decorate2.default)({
  size: true
})(Toggle);